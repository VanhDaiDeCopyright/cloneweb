var storageShim = {
    _data: {},
    setItem: function(key, value) {
        'use strict';
        this._data[key] = value + '';
    },
    getItem: function(key) {
        'use strict';
        return this._data[key];
    },
    removeItem: function(key) {
        'use strict';
        delete this._data[key];
    },
    clear: function() {
        'use strict';
        this._data = {};
    }
};
define('buildTools', [], function() {
    'use strict';
    var storage, storeName = 'buildDisabled';
    try {
        storage = window.localStorage;
    } catch (e) {
        storage = storageShim;
    }
    return {
        isEnabled: storage.getItem(storeName) === null,
        removeBaseUrl: function(url, config) {
            var urlParts, baseUrlParts, baseUrl = config.baseUrl || '',
                index = url.indexOf(baseUrl);
            if (~index) {
                url = url.substring(baseUrl.length - index);
            } else {
                baseUrlParts = baseUrl.split('/');
                baseUrlParts = baseUrlParts.slice(0, -5);
                baseUrl = baseUrlParts.join('/');
                url = url.substring(baseUrl.length);
                urlParts = url.split('/');
                urlParts = urlParts.slice(5);
                url = urlParts.join('/');
            }
            return url;
        },
        on: function() {
            storage.removeItem(storeName);
            location.reload();
        },
        off: function() {
            storage.setItem(storeName, 'true');
            location.reload();
        }
    };
});
define('statistician', [], function() {
    'use strict';
    var storage, stringify = JSON.stringify.bind(JSON);
    try {
        storage = window.localStorage;
    } catch (e) {
        storage = storageShim;
    }

    function uniq(arr) {
        return arr.filter(function(entry, i) {
            return arr.indexOf(entry) >= i;
        });
    }

    function difference() {
        var args = Array.prototype.slice.call(arguments),
            target = args.splice(0, 1)[0];
        return target.filter(function(entry) {
            return !args.some(function(arr) {
                return !!~arr.indexOf(entry);
            });
        });
    }

    function set(data, key) {
        storage.setItem(key, stringify(data));
    }

    function getModules(key) {
        var plain = storage.getItem(key);
        return plain ? JSON.parse(plain) : [];
    }

    function storeModules(modules, key) {
        var old = getModules(key);
        set(uniq(old.concat(modules)), key);
    }

    function upload(fileName, data) {
        var a = document.createElement('a'),
            blob, url;
        a.style = 'display: none';
        document.body.appendChild(a);
        blob = new Blob([JSON.stringify(data)], {
            type: 'octet/stream'
        });
        url = window.URL.createObjectURL(blob);
        a.href = url;
        a.download = fileName;
        a.click();
        window.URL.revokeObjectURL(url);
    }
    return {
        collect: function(modules) {
            storeModules(Object.keys(modules), 'all');
        },
        utilize: function(module) {
            storeModules([module], 'used');
        },
        getAll: function() {
            return getModules('all');
        },
        getUsed: function() {
            return getModules('used');
        },
        getUnused: function() {
            var all = getModules('all'),
                used = getModules('used');
            return difference(all, used);
        },
        clear: function() {
            storage.removeItem('all');
            storage.removeItem('used');
        },
        export: function() {
            upload('Magento Bundle Statistics', {
                used: this.getUsed(),
                unused: this.getUnused(),
                all: this.getAll()
            });
        }
    };
});
define('jsbuild', ['module', 'buildTools', 'statistician'], function(module, tools, statistician) {
    'use strict';
    var build = module.config() || {};
    if (!tools.isEnabled) {
        return;
    }
    require._load = require.load;
    statistician.collect(build);
    require.load = function(context, moduleName, url) {
        var relative = tools.removeBaseUrl(url, context.config),
            data = build[relative];
        if (data) {
            statistician.utilize(relative);
            new Function(data)();
            context.completeLoad(moduleName);
        } else {
            require._load.apply(require, arguments);
        }
    };
});
define('text', ['module', 'buildTools', 'mage/requirejs/text'], function(module, tools, text) {
    'use strict';
    var build = module.config() || {};
    if (!tools.isEnabled) {
        return text;
    }
    text._load = text.load;
    text.load = function(name, req, onLoad, config) {
        var url = req.toUrl(name),
            relative = tools.removeBaseUrl(url, config),
            data = build[relative];
        data ? onLoad(data) : text._load.apply(text, arguments);
    };
    return text;
});